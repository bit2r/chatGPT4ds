---
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---

# 많은 회귀모형 {#purrr-many-models}

## 기대수명 데이터 {#model-reg-viz-data}

`gapminder` 데이터를 가지고 회귀모형을 구축하고 모형을 활용하여 종속변수(기대수명, `lifeExp`)가 늘어나지 못한 국가를 뽑아내고 이를 시각적으로 확인해보자.

```{r}
#| label: model-reg-viz-gapminder

# 0. 환경설정 -----
# 데이터
library(gapminder)

# Tidyverse
library(tidyverse)

# 모형
library(broom)

# 1. 데이터 -----
gapminder
```

### 기대수명 회귀분석 {#model-reg-viz-model}

대륙과 국가를 그룹으로 잡아 회귀분석을 각각에 대해서 돌리고 나서,
모형 결과값을 데이터와 모형이 함께 위치하도록 티블(tibble)에 저장시켜 놓은다.
그리고 나서, 주요한 회귀모형 성능지표인 결정계수($R^2$)를 기준으로 정렬시킨다.

```{r model-reg-viz-gapminder-reg}
# 2. 모형 -----
country_model <- function(df)
  lm(lifeExp ~ year, data=df)

by_country <- gapminder %>% 
  group_by(country, continent) %>% 
  nest() %>% 
  mutate(model = map(data, country_model),
         model_glance = map(model, glance),
         rsquare = map_dbl(model_glance, ~.$r.squared)) |> 
  ungroup()

by_country %>% 
  arrange(rsquare)
```


### 회귀모형 시각화 {#model-reg-viz-model-trelliscope}

데이터셋 `by_country`를 이용하여 각 나라별로 회귀 모델의 $ R^2 $ (결정 계수) 값을 기반으로 "적합국"과 "비적합국"을 분류하고, 그 결과를 시각화한다. $ R^2 $ 값이 큰 나라 5개와 작은 나라 5개를 추출하여 기대수명 변화를 그래프로 대조하여 국가별 차이를 명확히 한다.


1. **최대 $ R^2 $ 값의 국가 추출**:
   - `by_country` 데이터셋에서 `rsquare` 값이 가장 큰 5개의 국가를 추출한다.
   - 해당 국가 이름들을 `rsquare_max_countries`에 저장한다.

2. **최소 $ R^2 $ 값의 국가 추출**:
   - `by_country` 데이터셋에서 `rsquare` 값이 가장 작은 5개의 국가를 추출한다.
   - 해당 국가 이름들을 `rsquare_min_countries`에 저장한다.

3. **데이터 필터링 및 시각화**:
   - 총 10개 국가에 해당하는 데이터만 `by_country`에서 추출한다.
   - 추출된 데이터에서 나라명, 대륙명, $ R^2 $ 값, 그리고 원데이터를 추출한다.
   - 결과를 $ R^2 $ 값의 내림차순으로 정렬한다.
   - 데이터를 정리하여 각 나라의 연도별 기대수명을 나타내는 선그래프를 생성하고, 그래프에서는 $ R^2 $ 값이 높은 국가들을 "발전된국가"로, 낮은 값을 가진 국가들을 "개발국"으로 분류하여 색상을 달리하여 시각화할 재료로 준비한다.

최종적으로는 각 국가별로 연도에 따른 기대수명 변화를 보여주는 그래프를 생성한다. $ R^2 $ 값이 높은 국가들은 빨간색으로, 낮은 국가들은 파란색으로 표시한고, 마지막으로 회귀모형이 얼마나 잘 적합되었는지에 따라 각 국가의 기대수명 변화 패턴을 비교한다. 파란색으로 회귀모형이 잘 적합된 경우에도 서로 다른 패턴이 확인된다. 즉, 선진국과 개발도상국 모두 제2차 세계대전 이후 기대수명이 증대했으나 선진국은 높은 기대수명에서 개도국은 낮은 기대수명에서 시작해서 모두 기대수명이 높아진 것이 눈에 띈다. 하지만, 빨간색으로 회귀계수가 낮은 나라는 기대수명이 높아지다가 특정 사건으로 인해 기대수명이 제자리로 돌아온 이후 다시 기대수명이 높아지는 추세를 보여 비선형적 관계를 보여주고 있어 회귀계수가 전반적으로 낮게 나타났다.

```{r}
rsquare_max_countries <- by_country |> 
  slice_max(order_by = rsquare, n = 5)  |> 
  pull(country) |> 
  droplevels()

rsquare_min_countries <- by_country |> 
  slice_min(order_by = rsquare, n = 5) |> 
  pull(country) |> 
  droplevels()

by_country |> 
  filter(country %in% rsquare_max_countries | country %in% rsquare_min_countries) |> 
  select(country, continent, rsquare, data) |> 
  arrange(desc(rsquare)) |> 
  unnest(data) |> 
  mutate(country = factor(country, levels = c(rsquare_max_countries, rsquare_min_countries))) |> 
  mutate(class = if_else(country %in% rsquare_max_countries, "발전된국가", "개발국")) |> 
  ggplot(aes(x = year, y = lifeExp, color = class)) +
    geom_line() +
    facet_wrap(~country, nrow = 2) +
    scale_color_manual(values = c("red", "blue")) +
    theme_minimal() +
    theme(legend.position = "none",
          axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    labs(title ="회귀모형 기대수명 적합국과 비적합국",
         x = "",
         y = "기대수명",
         caption = "자료출처: gapminder")

```

## 모형식별

`purrr` 팩키지를 활용하여 원본 모형 데이터와 모형을 하나의 데이터프레임(`tibble`)에 담을 수가 있다.
즉, 6가지 서로 다른 회귀모형을 일괄적으로 적합시키고 가장 AIC 값이 적은 회귀모형을 선택하는 코드를 다음과 같이 작성한다. [^many-models]

[^many-models]: [DAN OVANDO(FEBRUARY 20, 2018), "DATA WRANGLING AND MODEL FITTING USING PURRR"](https://www.weirdfishes.blog/blog/practical-purrr/)

1. `reg_models`: 다양한 회귀모형을 정의한다.
1. `mutate(map())`: 정의한 회귀모형 각각을 적합시키고 모형성능 지표를 추출한다.
1. AIC 기준으로 가장 낮은 모형을 선정한다.

```{r gapminder-reg}
library(tidyverse)
library(gapminder)

## 데이터셋 준비 -----
gapminder <- gapminder %>%
  set_names(colnames(.) %>% tolower())

## 다양한 회귀모형 -----
reg_models <- list(
  `01_pop` = 'lifeexp ~ pop',
  `02_gdppercap` = 'lifeexp ~ gdppercap',
  `03_simple` = 'lifeexp ~ pop + gdppercap',
  `04_medium` = 'lifeexp ~ pop + gdppercap + continent + year',
  `05_more`   = 'lifeexp ~ pop + gdppercap + country + year',
  `06_full`   = 'lifeexp ~ pop + gdppercap + year*country')

model_tbl <- tibble(reg_formula = reg_models) %>%
  mutate(model_name = names(reg_formula)) %>% 
  select(model_name, reg_formula) %>% 
  mutate(reg_formula = map(reg_formula, as.formula))

model_tbl

## 회귀모형 적합 및 모형 성능 지표 -----
model_tbl <- model_tbl %>%
  mutate(fit = map(reg_formula, ~lm(., data = gapminder))) %>% 
  mutate(model_glance = map(fit, broom::glance),
         rsquare      = map_dbl(model_glance, ~.$r.squared),
         AIC          = map_dbl(model_glance, ~.$AIC)) %>% 
  arrange(AIC)

model_tbl
```

### 교차검증 `CV` {#cv-reg-model}

데이터를 10조각내서 교차검정을 통해 RMSE가 가장 작은 회귀모형이 어떤 것인지 살펴보자.
`cross_df()` 함수로 교차검증 `splits` 데이터와 모형을 준비한다.
다음으로 `analysis()` 함수로 교차검증 데이터에 대해서 회귀모형 각각을 적합시키고,
`assessment()` 함수로 적합시킨 모형에 대해 모형성능을 살펴본다.
마지막으로 RMSE 회귀모형 성능지표를 통해 모형선택을 한다.

```{r gapminder-cv-reg}
## 교차검정 -----
valid_tbl <- gapminder %>%
  rsample::vfold_cv(10)

cv_tbl <- list(test_training = list(valid_tbl), 
               model_name = model_tbl$model_name)  
  
cv_tbl <- tidyr::expand_grid(test_training = list(valid_tbl), 
                             model_name = model_tbl$model_name)

cv_tbl <- cv_tbl %>%
  mutate(model_number = row_number()) %>%  # Manually creating the model_number column
  left_join(model_tbl %>% select(model_name, reg_formula), by = "model_name") %>% 
  unnest(cols = c(test_training))

cv_tbl

## 교차검정 analysis, assessment -----
cv_fit_tbl <- cv_tbl %>%
  mutate(fit = map2(reg_formula, splits, ~lm(.x, data = rsample::analysis(.y)))) %>%
  mutate(RMSE = map2_dbl(fit, splits, ~modelr::rmse(.x, rsample::assessment(.y))))

cv_fit_tbl

## 시각화 -----
cv_fit_tbl %>%
  ggplot(aes(RMSE, fill = model_name)) +
  geom_density(alpha = 0.75) +
  labs(x = "RMSE", title = "gapminder 회귀모형별 교차검정 분포")
```


### 병렬처리 - `furrr` {#cv-reg-model-furrr}

`parallel::detectCores()`을 통해 전체 코어 숫자를 확인하고 이를 병렬처리를 통해 교차검증에 따른 시간을 대폭 절감시킨다. 이를 위해서 `future` 팩키지를 사용하고 절약되는 시간을 측정하기 위해서 `tictoc` 팩키지를 동원한다.


```{r}
#| label: gapminder-cv-reg-furrr
library(furrr)
library(tictoc)

plan(multisession, workers = parallel::detectCores() - 1)
```


::::: {.columns}
::: {.column}

**`purrr` 순차처리**

```{r gapminder-cv-reg-furrr-purrr}
## purrr 순차처리 -----
tic()

cv_fit_tbl <- cv_tbl %>%
  mutate(fit = map2(reg_formula, splits, ~lm(.x, data = rsample::analysis(.y))))

toc()
```

:::

::: {.column}
**`furrr` 병렬처리**

```{r gapminder-cv-reg-furrr-furrr}
## furrr 병렬처리 ----
tic()

cv_fit_tbl <- cv_tbl %>%
  mutate(fit = future_map2(reg_formula, splits, ~lm(.x, data = rsample::analysis(.y)), .progress=TRUE)) 

toc()
```

:::
:::::



