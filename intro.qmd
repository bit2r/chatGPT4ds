
# 들어가며 {#intro}


```{mermaid}
%%| label: fig-workflow
%%| fig-cap: 데이터 과학 작업흐름도
%%| fig-align: center

graph TB
    subgraph Software["좋은 소프트웨어 개발, 챗GPT"]
        subgraph 이해하기
            모형 --> 시각화
            변환 --> 모형
            시각화 --> 변환
            
        end
    가져오기 --> 깔끔화 --> 이해하기
    이해하기 --> 의사소통
    end
    
    classDef modern fill:#fff,stroke:#333,stroke-width:2px,color:#333,font-family:MaruBuri,font-size:12px;
    classDef emphasize fill:#8CBDE3,stroke:#333,stroke-width:3px,color:#333,font-family:MaruBuri,font-size:15px,font-weight:bold;
    classDef subgraphStyle fill:#f0f8ff,stroke:#333,stroke-width:2px,color:#333,font-family:MaruBuri,font-size:15px;
    
    class 깔끔화,변환,모형,시각화,의사소통 modern
    class 가져오기 emphasize
    class 이해하기 subgraphStyle
```


## 좋은 소프트웨어 작성법

좋은 소프트웨어를 작성하려면,

* 프로젝트를 적절히 구조화하고,
* 필요한 사항은 문서화하고,
* 복잡한 문제는 작은 모듈로 나누어 해결하고,
* 코드 작동을 검증하는 테스트를 만들고,
* 반복되는 코드는 함수로 묶어서 처리하고,
* 일관된 코딩 스타일을 고수해야 한다.

위의 원칙을 지키면 다른 동료 연구자들과 미래의 자신에게
읽기 쉽고, 이해하기 쉽고, 확장 가능한 코드를 선물할 수 있을 것이다.

### 프로젝트 폴더 구조화

하위 폴더를 코드, 매뉴얼, 데이터, 바이너리, 출력 그래프 등으로 구분하여 프로젝트 폴더를 구조화하고, 잘 조직화하고, 깔끔하게 만든다.
완전 수작업으로 할 수도 있고, RStudio `New Project` 기능을 활용하거나 `ProjectTemplate` 같은 패키지를 사용한다.

::: callout-note
### `ProjectTemplate` - 가능한 해결책

프로젝트 관리를 자동화하는 한 방식은 제3자 패키지, `ProjectTemplate`을 설치하는 것이다.
해당 패키지는 프로젝트 관리에 대한 이상적인 디렉토리 구조를 설정해 놓는다.
패키지가 자동으로 분석 파이프라인/작업 흐름을 구성해서 구조화해 놓는다.
RStudio 기본 설정된 프로젝트 관리 기능과 Git을 섞어 사용하면, 작업을 기록할 뿐만 아니라,
동료 연구원과 작업 산출물을 공유할 수 있게 한다.


1. `ProjectTemplate`을 설치한다.
2. 라이브러리를 불러 적재한다.
3. 프로젝트를 초기화한다.

```{r}
#| eval: false
install.packages("ProjectTemplate")

library(ProjectTemplate)
create.project("../my_project", merge.strategy = "allow.non.conflict")
```

`ProjectTemplate`과 기능에 대한 자세한 사항은
[ProjectTemplate](http://projecttemplate.net/index.html) 홈페이지를 방문한다.

:::


### 가독성 높은 코드 생성

코드 작성에 있어 가장 중요한 부분은 코드를 가독성 있고 이해할 수 있게 작성하는 것이다.
누군가 여러분이 작성한 코드를 보고 무슨 작업을 수행하는지 이해할 수 있어야 한다.
흔히 누군가는 6개월 후에 **바로 당신**이 될 수 있고, 만약 그렇게 작성하지 않았다면
과거 자기 자신을 분명히 저주하게 될 것이다.

### 문서화 

처음 코드를 작성할 때, 주석은 명령어가 무엇을 수행하는지 기술한다.
왜냐하면, 여전히 학습 중이라 개념을 명확히 하고, 나중에 다시 상기하는 데 도움이 되기 때문이다.
하지만, 이러한 주석은 나중에 작성한 코드가 어떤 문제를 해결하고자 하는지
기억하지 못하면 그다지 도움이 되지 않는다.

**왜(why)** 문제를 해결하려고 하는지, 그리고 **어떤(what)** 문제인지 전달하는
주석을 달려고 노력한다.
**어떻게(how)**는 그 다음에 온다. 
정말 걱정할 필요가 없는 사항은 구체적인 구현이다.

### 코드 모듈화

소프트웨어 카펜트리에서 추천하는 것은 작성한 함수를 분석 스크립트와
구별해서 별도 파일에 저장하는 것이다. 프로젝트 R세션을 열 때,
`source` 함수로 불러올 수 있게 별도 파일로 저장한다.

분석 스크립트를 깔끔하게 유지하고, 유용한 함수 저장소를
프로젝트 분석 스크립트에 적재할 수 있게 함으로써 이러한 접근법이 깔끔하다.
또한 관련된 함수를 쉽게 그룹화한다.

### 문제를 작게 분해

처음 시작할 때, 문제 해결과 함수 작성은 어마어마한 작업이고,
코드를 쪼개는 것도 힘들다.
문제를 소화 가능한 덩어리로 쪼개고,
나중에 구현에 관한 구체적인 사항을 걱정한다.
해결책을 코드로 작성할 수 있는 지점까지
문제를 더 작게 그리고 더 작은 함수로 계속 쪼개 나간다.
그리고 나서 다시 거꾸로 조립해서 만들어 낸다.

### 코드 테스트

작성한 코드가 올바른 작업을 수행하도록 만든다.
작성한 함수를 테스트해서 확실히 동작하게 만든다.

### 복붙 금지

복붙은 코드를 작성하는 데 있어서 가장 나쁜 방법이다.
함수는 프로젝트 내부에서 재사용을 쉽게 한다.
프로젝트를 통해서 유사한 코드 라인 덩어리를 보게 되면,
대체로 함수로 옮겨져야 하는 대상을 찾은 것이다.

연산 작업이 연속된 함수를 통해 실행되면,
프로젝트는 모듈로 만들기 쉽고, 변경하기 쉽다.
항상 특정한 입력값을 넣으면 특정한 출력값이 나오는 경우에 특히 그렇다.

### 스타일 고집

코드에 일관된 스타일을 지킨다.
이것은 코드를 읽고 이해하는 데 도움이 된다.

### 코드 스타일과 가독성

일관된 코딩 스타일은 가독성을 높이고 버그를 최소화한다.
R 커뮤니티에서 가장 널리 사용되는 스타일 가이드 중 하나는 
[해들리 위컴 스타일 가이드](http://adv-r.had.co.nz/Style.html)다.
Google의 R 스타일 가이드도 널리 사용된다.

일관된 스타일에 프로젝트를 고수하면, 다른 사람들이 코드를 더 쉽게 읽고 확장할 수 있다.
RStudio의 코드 정리 기능을 활용하여 코드 스타일을 자동으로 적용할 수도 있다.

### 핵심은 일관성

함수 이름 붙이기, 코드 들여쓰기, 주석 달기 등 코딩 스타일의 어떤 요소든
한번 선택하면 이후로도 꾸준히 같은 스타일을 고수해야 한다.
코드 작성자에게는 편한 스타일이 좋지만, 팀 단위로 협업한다면
팀에서 합의한 코딩 스타일을 따르는 것이 바람직하다.



