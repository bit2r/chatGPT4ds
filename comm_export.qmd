# 저장하기

## 그림 저장하기

`ggsave` 명령어를 사용해서,
`ggplot2`에서 생성한 가장 최신 도식화 결과물을 저장하는 방법을 이미 살펴봤다. 
다시 상기시키기 위해 명령어를 적어보면 다음과 같다:

```{r}
# eval: false
ggsave("My_most_recent_plot.pdf")
```

RStudio 내부에서 그림을 저장할 경우,
'Plot' 윈도우에서 'Export' 버튼을 사용한다.
버튼을 클릭하면 `.pdf`, `.png`, `.jpg` 혹은 다른 이미지 형식으로 저장할지
선택 옵션이 제시된다.

종종 'Plot' 윈도우에 먼저 찍어보지 말고 도표를 저장하고 싶을 때도 있다.
아마도 여러 페이지에 걸친 PDF 문서를 생성하고 싶을 것이다.
예를 들어, 각각은 다른 도표로 말이다. 
혹은 다수 파일에서 부분집합으로 데이터를 뽑아내고,
각 하위 데이터에 대해 도식화를 하고, 결과물을 도표로 저장하고자 한다.
하지만 각각에 대해 'Export' 버튼을 클릭하려고 루프를
중단할 수는 없는 노릇이다.

이런 경우 더 유연한 접근법을 사용할 수 있다.
`pdf` 함수는 새로운 PDF 장치를 생성한다.
`pdf` 함수에 여러 인자를 사용해서 크기와 해상도를 조절할 수 있다.

```{r}
#| eval: false
pdf("Life_Exp_vs_time.pdf", width=12, height=4)
ggplot(data=gapminder, aes(x=year, y=lifeExp, colour=country)) +
  geom_line() +
  theme(legend.position = "none")

# 그런 다음에는 반드시 PDF 장치를 끄는 것을 잊지 말아야 한다!
dev.off()
```

저장한 문서를 열어서 살펴본다.

::::: callout-tip
### 도전과제

> 
> `pdf` 명령어를 다시 작성해서 PDF 파일에 두 번째 페이지를 생성한다.
> 각 창 패널에 대륙별로 데이터를 패싯 도표(힌트: `facet_grid` 사용)로 출력한다.

::: {.callout-caution collapse="true"}
### 해답

```{r}
#| eval: false
pdf("Life_Exp_vs_time.pdf", width = 12, height = 4)

p <- ggplot(data = gapminder, aes(x = year, y = lifeExp, colour = country)) +
  geom_line() +
  theme(legend.position = "none")
p

p + facet_grid(. ~continent)

dev.off()
```

:::

::::::


`jpeg`, `png` 등의 명령어도 다양한 형식으로 문서를 저장하는 데
유사하게 사용할 수 있다.

## 데이터를 파일 저장

어느 시점이 되면 R에서 데이터를 내보내서 파일에 저장하기도 한다. 
이런 목적으로 `write.table` 함수를 사용하는데,
앞서 살펴본 `read.table` 함수와 매우 유사하다.

데이터 정제 스크립트를 생성하자. 
`gapminder` 데이터에서 Australia 호주만 집중한다:


```{r}
#| eval: false
aust_subset <- gapminder[gapminder$country == "Australia",]

write.table(aust_subset,
  file="cleaned-data/gapminder-aus.csv",
  sep=","
)
```

쉘로 다시 전환해서 모든 것이 정상인지 데이터를 살펴본다.

``` {bash}
#| eval: false
$ head cleaned-data/gapminder-aus.csv
```

음... 엄밀하게 보면 원하는 바는 아니다.
이 모든 인용부호는 어디서 왔을까?
또한 행 번호도 보이는데 무의미하다.

도움말 파일을 살펴보고 파일에 저장하는 방식을 변경해 본다.

```{r}
#| eval: false
? write.table
```

기본 설정으로 데이터를 파일에 저장할 때
R은 자동으로 인용부호로 문자 벡터를 감싼다.
행과 열 명칭도 파일에 저장한다.

다음과 같이 고쳐본다:

```{r}
#| eval: false
write.table(
  gapminder[gapminder$country == "Australia",],
  file="cleaned-data/gapminder-aus.csv",
  sep=",", quote=FALSE, row.names=FALSE
)
```

쉘 기술을 사용해서 다시 데이터를 살펴본다:

``` {bash}
#| eval: false
$ head cleaned-data/gapminder-aus.csv
```

훨씬 좋아 보인다!

::::: callout-tip
### 도전과제

1990년 이후 수집된 데이터를 `gapminder` 데이터에서 
부분집합으로 구성하는 데이터 정제 스크립트를 작성한다.
상기 스크립트를 사용해서 작업한 새로운 부분집합 데이터를 
`cleaned-data/` 디렉터리에 파일로 저장한다.


::: {.callout-caution collapse="true"}
### 해답

```{r}
#| eval: false
write.table(
   gapminder[gapminder$year > 1990, ],
   file = "cleaned-data/gapminder-after1990.csv",
   sep = ",", quote = FALSE, row.names = FALSE
)
```

:::

:::::


```{r}
#| eval: false
# 수업 저장소에 이 디렉터리가 포함되는 것을 원치 않기 때문에,
# cleaned-data 디렉터리를 삭제한다.
unlink("cleaned-data", recursive=TRUE)
```
