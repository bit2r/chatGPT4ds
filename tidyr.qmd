# `tidyr` 데이터프레임 조작



```{r}
#| include: false
# Silently load in the data so the rest of the lesson works
gapminder <- read.csv("data/gapminder_data.csv", header=TRUE, stringsAsFactors = FALSE)

# To create gapminder_wide.csv:
# library("dplyr")
# library("tidyr")
#
# #transform the data to the wide format
# gap_wide <- gapminder %>%
#   pivot_longer(cols = -c(continent, country, year), names_to = "obs_type", values_to = "obs_values") %>%
#   unite("ID_var", continent, country, sep = "_") %>%
#   mutate(var_names = paste(obs_type, year, sep = "_")) %>%
#   pivot_wider(names_from = var_names, values_from = obs_values, id_cols = ID_var) %>%
#   separate(ID_var, into = c('continent', 'country'), sep = '_')#
# #write our the .csv so students can use it
# write.csv(gap_wide_betterID,"data/gapminder_wide.csv",row.names = FALSE)

#load the "student" data
gap_wide <- read.csv("data/gapminder_wide.csv", header=TRUE, stringsAsFactors = FALSE)
```

과학연구원들은 흔히 'wide' 형식에서 'long' 형식으로 혹은 역으로 데이터를 솜씨 있게 조작해야 한다. 
'long' 형식은 다음과 같이 정의된다:

- 각 칼럼이 변수다.
- 각 행이 관측점이다.

순수한 'long'(또는 '가장 긴') 형식에서는 일반적으로 관측 변수에 대해 1개의 열과 ID 변수에 대해 다른 열들을 가진다. 

'wide' 형식에서 각 행은 흔히 관측점(site/subject/patient)이며, 
동일한 자료형을 담고 있는 다수 관측변수를 갖게 된다. 
시간이 경과함에 따라 반복되는 관측점이거나, 다수 변수의 관측점(혹은 둘이 혼합된 사례)일 수 있다. 
데이터 입력이 더 단순하거나 일부 다른 응용 사례에서 'wide' 형식을 선호할 수 있다. 
하지만, `R` 함수 다수는 'long'형식을 가정하고 설계되었다. 
원래 데이터 형식에 관계없이 데이터를 효율적으로 변환하는 방식을 자세히 살펴보자.

![`wide`와 `long` 데이터프레임 비교](images/gapminder/14-tidyr-fig1.png){#fig-gapminder-long}


데이터 형식은 주로 가독성에 영향을 준다. 
사람에게는 'wide' 형식이 좀 더 직관적인데, 이유는 데이터 형상으로 인해 화면에 더 많은 데이터를 볼 수 있기 때문이다. 
하지만, 컴퓨터에게는 'long' 형식이 더 가독성이 높고, 데이터베이스 형식에 훨씬 더 가깝다.
데이터프레임의 ID 변수는 데이터베이스 필드(Field)와 유사하고, 관측변수는 데이터베이스 값(Value)과 유사하다.


## 시작하기

먼저 설치하지 않았다면 `tidyr` 패키지를 설치한다(아마도 앞에서 `dplyr` 패키지는 설치했을 것이다):

```{r,eval=FALSE}
#install.packages("tidyr")
#install.packages("dplyr")
```

패키지를 로드한다

```{r,message=FALSE}
library("tidyr")
library("dplyr")
```

먼저 원래 gapminder 데이터프레임의 구조를 살펴보자:

```{r}
str(gapminder)
```

::::: callout-tip
### 도전과제 

`gapminder`는 순수한 'long' 형식인가, 'wide' 형식인가, 혹은 두 가지 특징을 갖는 중간 형식인가?


::: {.callout-caution collapse="true"}
### 해답

원 gapminder 데이터프레임은 두 가지 특징을 갖는 중간 형식이다.
데이터프레임에 다수의 관측변수(`pop`, `lifeExp`, `gdpPercap`)가 있다는 점에서,
순수한 `long` 형식이라고 보기는 어렵다.
:::

::::::


`gapminder` 데이터셋처럼, 관측된 데이터에는 다양한 자료 형식이 있다. 
대부분 순도 100% 'long' 혹은 순도 100% 'wide' 자료 형식 사이 어딘가에 위치하게 된다.
`gapminder` 데이터셋에는 "ID" 변수가 3개(`continent`, `country`, `year`), "관측변수"가 3개(`pop`, `lifeExp`, `gdpPercap`)가 있다.
저자는 일반적으로 대부분의 경우에 중간단계 형식 데이터를 선호한다.
칼럼 1곳에 모든 관측점이 3가지 서로 다른 단위를 갖는 일은 거의 없다(예를 들어, ID변수 4개, 관측변수 1개).


흔히 벡터 기반인 다수의 R 함수를 사용할 때, 서로 다른 단위를 갖는 값에 수학적 연산작업을 수행하지는 않는다.
예를 들어, 순수 'long' 형식을 사용할 때, 
인구, 기대수명, GDP의 모든 값에 대한 평균은 의미가 없는데, 
이는 상호 호환되지 않는 3가지 단위를 갖는 평균값을 계산하여 반환하기 때문이다.
해법은 먼저 집단으로 그룹지어서 데이터를 솜씨 있게 다루거나(`dplyr` 학습교재 참조), 
데이터프레임 구조를 변경시키는 것이다. 
**주의:** R에서 일부 도식화 함수는 'wide' 형식 데이터에 더 잘 작동한다.


## `pivot_longer()`: `wide`에서 `long` 형식 전환

지금까지 깔끔한 형식을 갖는 원본 `gapminder` 데이터셋으로 작업을 했다.
하지만 '실제' 데이터(즉, 자체 연구 데이터)는 절대로 잘 구성되어 있지 못하다.
`gapminder` 데이터셋에 대한 `wide` 형식 버전을 가지고 시작해보자.

> [이곳에서](https://raw.githubusercontent.com/bit2r/gpt-ds/main/data/gapminder_wide.csv) 'wide' 형태를 갖는
> `gapminder` 데이터를 다운로드 받아서, 로컬 `data` 폴더에 저장시킨다.

데이터 파일을 불러와서 살펴보자.
주의: `continent`, `country` 칼럼이 요인형 자료형이 될 필요가 없으므로
`read.csv()` 함수 인자로 `stringsAsFactors`을 거짓(FALSE)으로 설정한다.

```{webr-r}
#| label: tidyr-gapminder-pivot-longer
### 실습 데이터 다운로드 및 불러오기
download.file("https://raw.githubusercontent.com/bit2r/gpt-ds/main/data/gapminder_data.csv", "gapminder_data.csv") 
gapminder <- read.csv("gapminder_data.csv", header=TRUE, stringsAsFactors = FALSE)

download.file("https://raw.githubusercontent.com/bit2r/gpt-ds/main/data/gapminder_wide.csv", "gapminder_wide.csv") 
# gap_wide <- read.csv("data/gapminder_wide.csv", stringsAsFactors = FALSE) # 로컬 작업 
gap_wide <- read.csv("gapminder_wide.csv", stringsAsFactors = FALSE) # webr
str(gap_wide)
#> 'data.frame':	142 obs. of  38 variables:
#>  $ continent     : chr  "Africa" "Africa" "Africa" "Africa" ...
#>  $ country       : chr  "Algeria" "Angola" "Benin" "Botswana" ...
#>  $ gdpPercap_1952: num  2449 3521 1063 851 543 ...
#>  $ gdpPercap_1957: num  3014 3828 960 918 617 ...
#>  $ gdpPercap_1962: num  2551 4269 949 984 723 ...
#>  $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...
#>  $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...
#>  $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...
#>  $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...
#>  $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...
#>  $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...
#>  $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...
#>  $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...
#>  $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...
#>  $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...
#>  $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...
#>  $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...
#>  $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...
#>  $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...
#>  $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...
#>  $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...
#>  $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...
#>  $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...
#>  $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...
#>  $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...
#>  $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...
#>  $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...
#>  $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...
#>  $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...
#>  $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...
#>  $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...
#>  $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...
#>  $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...
#>  $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...
#>  $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...
#>  $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...
#>  $ pop_2002      : int  31287142 10866106 7026113 1630347 12251209 7021078 15929988 4048013 8835739 614382 ...
#>  $ pop_2007      : int  33333216 12420476 8078314 1639131 14326203 8390505 17696293 4369038 10238807 710960 ...
```

![`wide` 형식 데이터프레임](images/gapminder/14-tidyr-fig2.png)

깔끔한 중간 데이터 형식을 얻는 첫 단추는 먼저 'wide' 형식에서 'long' 형식으로 변환하는 것이다.
`tidyr` 패키지의 `pivot_longer()` 함수는 관측 변수를 모아서(gather) `long` 형식 단일 변수로 변환한다.
`wide`에서 `long` 형식으로 변환하기 위해 `pivot_longer()` 함수를 사용한다.
`pivot_longer()`는 행의 수를 늘리고 열의 수를 줄임으로써 데이터셋을 더 길게 만들거나 관측 변수를 단일 변수로 '연장'한다.

![`wide` 형식에서 `long` 형식 전환과정 도식화 ](images/gapminder/14-tidyr-fig3.png){#fig-gapminder-pivot-longer}

```{webr-r}
#| label: tidyr-gapminder-pivot-longer
gap_long <- gap_wide %>%
  pivot_longer(
    cols = c(starts_with('pop'), starts_with('lifeExp'), starts_with('gdpPercap')),
    names_to = "obstype_year", values_to = "obs_values"
  )
str(gap_long)

#> tibble [5,112 × 4] (S3: tbl_df/tbl/data.frame)
#>  $ continent   : chr [1:5112] "Africa" "Africa" "Africa" "Africa" ...
#>  $ country     : chr [1:5112] "Algeria" "Algeria" "Algeria" "Algeria" ...
#>  $ obstype_year: chr [1:5112] "pop_1952" "pop_1957" "pop_1962" "pop_1967" ...
#>  $ obs_values  : num [1:5112] 9279525 10270856 11000948 12760499 14760787 ...
```

위에서 파이프 구문을 사용했는데, 이는 앞서 `dplyr`로 작업한 것과 유사하다.
사실, `dplyr`과 `tidyr`은 상호 호환되어 파이프 구문으로 `dplyr`과 `tidyr` 팩키지 함수를 파이핑하여 혼합하여 사용할 수 있다.

먼저 `pivot_longer()`에 longer 형식으로 피벗될 열 이름 벡터를 제공한다. 
모든 관측 변수를 입력할 수도 있지만 `dplyr` 레슨의 `select()` 함수처럼 `starts_with()` 인수를 사용하여 원하는 문자열로 시작하는 모든 변수를 선택할 수 있다. 
`pivot_longer()`는 피벗하지 않을 변수(즉, ID 변수)를 식별하기 위해 `-` 기호를 사용하는 대체 구문도 허용한다.
`pivot_longer()`에 대한 다음 인수는 새 ID 변수(`obstype_year`)를 포함할 열의 이름을 지정하는 `names_to`와 새로 합쳐진 관측 변수(`obs_value`)의 이름을 지정하는 
`values_to`이다. 새 열 이름을 문자열로 제공하여 후속 작업 가독성을 높인다.


```{webr-r}
#| label: tidyr-gapminder-pivot-longer2
gap_long <- gap_wide %>%
  pivot_longer(
    cols = c(-continent, -country),
    names_to = "obstype_year", values_to = "obs_values"
  )
str(gap_long)

#> tibble [5,112 × 4] (S3: tbl_df/tbl/data.frame)
#>  $ continent   : chr [1:5112] "Africa" "Africa" "Africa" "Africa" ...
#>  $ country     : chr [1:5112] "Algeria" "Algeria" "Algeria" "Algeria" ...
#>  $ obstype_year: chr [1:5112] "gdpPercap_1952" "gdpPercap_1957" "gdpPercap_1962" "gdpPercap_1967" ...
#>  $ obs_values  : num [1:5112] 2449 3014 2551 3247 4183 ...
```

특정 데이터프레임에서는 사소해 보일 수 있지만, 
때로는 ID 변수 1개와 불규칙한 변수 이름을 가진 관측 변수 40개를 가질 수 있다.
이런 유연성은 시간을 상당히 절약해 준다!

이제 `obstype_year`은 정보가 두 조각으로 나뉜다. 관측 유형(`pop`, `lifeExp`, `gdpPercap`)과 연도(`year`).
`separate()` 함수를 사용하여 문자열을 여러 변수로 분할할 수 있다.


```{webr-r}
#| label: tidyr-gapminder-pivot-longer3
gap_long <- gap_long %>% separate(obstype_year, into = c('obs_type', 'year'), sep = "_")
gap_long$year <- as.integer(gap_long$year)
```

::::: callout-tip
### 도전과제 

`gap_long`을 사용해서 각 대륙별로 평균 기대수명, 인구, 1인당 GDP를 계산한다.
**힌트:** `dplyr`에서 학습한 `group_by()`와 `summarize()` 함수를 사용한다.

::: {.callout-caution collapse="true"}
### 해답

```{webr-r}
#| label: tidyr-gapminder-group_by
gap_long %>% group_by(continent,obs_type) %>%
    summarize(means=mean(obs_values))
```

:::

:::::


## `pivot_wider()`: 'long'에서 중간 형식으로

작업을 항상 확인하는 것이 좋다. 
`pivot_wider()`는 `pivot_longer()`의 반대로, 열의 수를 늘리고 행의 수를 줄여 데이터셋을 더 넓게 만든다. 
`pivot_wider()`를 사용하여 `gap_long`을 원래의 중간 형식 또는 가장 넓은 형식으로 피벗하거나 재구성할 수 있다. 
중간 형식에서부터 시작해보자.


```{webr-r}
#| label: tidyr-gapminder-pivot-wider
gap_normal <- gap_long %>%
    pivot_wider(names_from = obs_type, values_from = obs_values)
dim(gap_normal)
#> [1] 1704    6
dim(gapminder)
#> [1] 1704    6
names(gap_normal)
#> [1] "continent" "country"   "year"      "gdpPercap" "lifeExp"   "pop"     
names(gapminder)
#> [1] "country"   "year"      "pop"       "continent" "lifeExp"   "gdpPercap"
```

이제 최초 데이터프레임 `gapminder`와 동일한 차원을 갖는 중간 데이터프레임 `gap_normal`이 있다.
하지만 변수 순서가 다르다. 순서를 수정하기 전에 `all.equal()` 함수를 사용해서 동일한지 확인한다.

```{webr-r}
#| label: tidyr-gapminder-pivot-wider2
gap_normal <- gap_normal[,names(gapminder)]
all.equal(gap_normal,gapminder)
#> [1] "Attributes: < Component \"class\": Lengths (3, 1) differ (string compare on first 1) >"
#> [2] "Attributes: < Component \"class\": 1 string mismatch >"                                
#> [3] "Component \"country\": 1704 string mismatches"                                         
#> [4] "Component \"pop\": Mean relative difference: 1.634504"                                 
#> [5] "Component \"continent\": 1212 string mismatches"                                       
#> [6] "Component \"lifeExp\": Mean relative difference: 0.203822"                             
#> [7] "Component \"gdpPercap\": Mean relative difference: 1.162302"        

head(gap_normal)
#> # A tibble: 6 × 6
#>   country  year      pop continent lifeExp gdpPercap
#>   <chr>   <int>    <dbl> <chr>       <dbl>     <dbl>
#> 1 Algeria  1952  9279525 Africa       43.1     2449.
#> 2 Algeria  1957 10270856 Africa       45.7     3014.
#> 3 Algeria  1962 11000948 Africa       48.3     2551.
#> 4 Algeria  1967 12760499 Africa       51.4     3247.
#> 5 Algeria  1972 14760787 Africa       54.5     4183.
#> 6 Algeria  1977 17152804 Africa       58.0     4910.

head(gapminder)
#>       country year      pop continent lifeExp gdpPercap
#> 1 Afghanistan 1952  8425333      Asia  28.801  779.4453
#> 2 Afghanistan 1957  9240934      Asia  30.332  820.8530
#> 3 Afghanistan 1962 10267083      Asia  31.997  853.1007
#> 4 Afghanistan 1967 11537966      Asia  34.020  836.1971
#> 5 Afghanistan 1972 13079460      Asia  36.088  739.9811
#> 6 Afghanistan 1977 14880372      Asia  38.438  786.1134
```

거의 다 왔다. 최초 데이터프레임은 `country`로 정렬된 다음 `year`로 정렬되었다.

```{webr-r}
#| label: tidyr-gapminder-pivot-wider3
gap_normal <- gap_normal %>% arrange(country, year)
all.equal(gap_normal,gapminder)
#> [1] "Attributes: < Component \"class\": Lengths (3, 1) differ (string compare on first 1) >"
#> [2] "Attributes: < Component \"class\": 1 string mismatch >"   
```

훌륭하다! 'long' 형식에서 다시 중간 형식으로 돌아왔지만, 코드에 어떤 오류도 스며들지 않았다.

이제 long에서 wide로 완전히 변환해 보자. 
wide 형식에서는 country와 continent를 ID 변수로 유지하고 관측치를 3개의 측정 기준(`pop`, `lifeExp`, `gdpPercap`)과 시간(`year`)에 걸쳐 피벗할 것이다. 
먼저 모든 새 변수(시간\*측정 기준 조합)에 대한 적절한 레이블을 만들어야 하며 `gap_wide`를 정의하는 과정을 단순화하기 위해 ID 변수를 통합해야 한다.

```{webr-r}
#| label: tidyr-gapminder-pivot-wider4
gap_temp <- gap_long %>% unite(var_ID,continent,country,sep="_")
str(gap_temp)

#> tibble [5,112 × 4] (S3: tbl_df/tbl/data.frame)
#>  $ var_ID    : chr [1:5112] "Africa_Algeria" "Africa_Algeria" "Africa_Algeria" "Africa_Algeria" ...
#>  $ obs_type  : chr [1:5112] "gdpPercap" "gdpPercap" "gdpPercap" "gdpPercap" ...
#>  $ year      : int [1:5112] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...
#>  $ obs_values: num [1:5112] 2449 3014 2551 3247 4183 ...

gap_temp <- gap_long %>%
    unite(ID_var, continent, country, sep = "_") %>%
    unite(var_names, obs_type, year, sep = "_")
str(gap_temp)

#> tibble [5,112 × 3] (S3: tbl_df/tbl/data.frame)
#>  $ ID_var    : chr [1:5112] "Africa_Algeria" "Africa_Algeria" "Africa_Algeria" "Africa_Algeria" ...
#>  $ var_names : chr [1:5112] "gdpPercap_1952" "gdpPercap_1957" "gdpPercap_1962" "gdpPercap_1967" ...
#>  $ obs_values: num [1:5112] 2449 3014 2551 3247 4183 ...
```

`unite()`를 사용하여 이제 `continent`와 `country`의 조합인 단일 ID 변수를 가지고 있고 변수 이름을 정의했다. 
이제 `pivot_wider()`로 파이핑할 준비가 되었다.

```{webr-r}
#| label: tidyr-gapminder-pivot-wider5
gap_wide_new <- gap_long %>%
  unite(ID_var, continent, country, sep = "_") %>%
  unite(var_names, obs_type, year, sep = "_") %>%
  pivot_wider(names_from = var_names, values_from = obs_values)
str(gap_wide_new)

#> tibble [142 × 37] (S3: tbl_df/tbl/data.frame)
#>  $ ID_var        : chr [1:142] "Africa_Algeria" "Africa_Angola" "Africa_Benin" "Africa_Botswana" ...
#>  $ gdpPercap_1952: num [1:142] 2449 3521 1063 851 543 ...
#>  $ gdpPercap_1957: num [1:142] 3014 3828 960 918 617 ...
#>  $ gdpPercap_1962: num [1:142] 2551 4269 949 984 723 ...
#>  $ gdpPercap_1967: num [1:142] 3247 5523 1036 1215 795 ...
#>  $ gdpPercap_1972: num [1:142] 4183 5473 1086 2264 855 ...
#>  $ gdpPercap_1977: num [1:142] 4910 3009 1029 3215 743 ...
#>  $ gdpPercap_1982: num [1:142] 5745 2757 1278 4551 807 ...
#>  $ gdpPercap_1987: num [1:142] 5681 2430 1226 6206 912 ...
#>  $ gdpPercap_1992: num [1:142] 5023 2628 1191 7954 932 ...
#>  $ gdpPercap_1997: num [1:142] 4797 2277 1233 8647 946 ...
#>  $ gdpPercap_2002: num [1:142] 5288 2773 1373 11004 1038 ...
#>  $ gdpPercap_2007: num [1:142] 6223 4797 1441 12570 1217 ...
#>  $ lifeExp_1952  : num [1:142] 43.1 30 38.2 47.6 32 ...
#>  $ lifeExp_1957  : num [1:142] 45.7 32 40.4 49.6 34.9 ...
#>  $ lifeExp_1962  : num [1:142] 48.3 34 42.6 51.5 37.8 ...
#>  $ lifeExp_1967  : num [1:142] 51.4 36 44.9 53.3 40.7 ...
#>  $ lifeExp_1972  : num [1:142] 54.5 37.9 47 56 43.6 ...
#>  $ lifeExp_1977  : num [1:142] 58 39.5 49.2 59.3 46.1 ...
#>  $ lifeExp_1982  : num [1:142] 61.4 39.9 50.9 61.5 48.1 ...
#>  $ lifeExp_1987  : num [1:142] 65.8 39.9 52.3 63.6 49.6 ...
#>  $ lifeExp_1992  : num [1:142] 67.7 40.6 53.9 62.7 50.3 ...
#>  $ lifeExp_1997  : num [1:142] 69.2 41 54.8 52.6 50.3 ...
#>  $ lifeExp_2002  : num [1:142] 71 41 54.4 46.6 50.6 ...
#>  $ lifeExp_2007  : num [1:142] 72.3 42.7 56.7 50.7 52.3 ...
#>  $ pop_1952      : num [1:142] 9279525 4232095 1738315 442308 4469979 ...
#>  $ pop_1957      : num [1:142] 10270856 4561361 1925173 474639 4713416 ...
#>  $ pop_1962      : num [1:142] 11000948 4826015 2151895 512764 4919632 ...
#>  $ pop_1967      : num [1:142] 12760499 5247469 2427334 553541 5127935 ...
#>  $ pop_1972      : num [1:142] 14760787 5894858 2761407 619351 5433886 ...
#>  $ pop_1977      : num [1:142] 17152804 6162675 3168267 781472 5889574 ...
#>  $ pop_1982      : num [1:142] 20033753 7016384 3641603 970347 6634596 ...
#>  $ pop_1987      : num [1:142] 23254956 7874230 4243788 1151184 7586551 ...
#>  $ pop_1992      : num [1:142] 26298373 8735988 4981671 1342614 8878303 ...
#>  $ pop_1997      : num [1:142] 29072015 9875024 6066080 1536536 10352843 ...
#>  $ pop_2002      : num [1:142] 31287142 10866106 7026113 1630347 12251209 ...
#>  $ pop_2007      : num [1:142] 33333216 12420476 8078314 1639131 14326203 ...
```

::::: callout-tip
### 도전과제 

국가, 연도 및 3개의 측정 기준에 대해 피벗하여 `gap_ludicrously_wide` 형식 데이터를 만드시오.

**힌트** 이 새로운 데이터 프레임은 행이 5개만 있어야 한다.

::: {.callout-caution collapse="true"}
### 해답

```{webr-r}
#| label: tidyr-gapminer-wide-wider
gap_ludicrously_wide <- gap_long %>%
    unite(var_names, obs_type, year,country, sep="_") %>%
    pivot_wider(names_from = var_names, values_from = obs_values)
```

:::

:::::


이제 훌륭한 'wide' 형식 데이터프레임을 가지고 있지만 `ID_var`가 더 사용하기 편할 수 있다. `separate()`를 사용하여 2개의 변수로 분리해 보자.


```{webr-r}
#| label: tidyr-gapminer-separate-diff
gap_wide_betterID <- separate(gap_wide_new, ID_var, c("continent", "country"), sep="_")
gap_wide_betterID <- gap_long %>%
    unite(ID_var, continent, country, sep = "_") %>%
    unite(var_names, obs_type, year, sep = "_") %>%
    pivot_wider(names_from = var_names, values_from = obs_values) %>%
    separate(ID_var, c("continent","country"), sep = "_")
str(gap_wide_betterID)

#> tibble [142 × 38] (S3: tbl_df/tbl/data.frame)
#>  $ continent     : chr [1:142] "Africa" "Africa" "Africa" "Africa" ...
#>  $ country       : chr [1:142] "Algeria" "Angola" "Benin" "Botswana" ...
#>  $ gdpPercap_1952: num [1:142] 2449 3521 1063 851 543 ...
#>  $ gdpPercap_1957: num [1:142] 3014 3828 960 918 617 ...
#>  $ gdpPercap_1962: num [1:142] 2551 4269 949 984 723 ...
#>  $ gdpPercap_1967: num [1:142] 3247 5523 1036 1215 795 ...
#>  $ gdpPercap_1972: num [1:142] 4183 5473 1086 2264 855 ...
#>  $ gdpPercap_1977: num [1:142] 4910 3009 1029 3215 743 ...
#>  $ gdpPercap_1982: num [1:142] 5745 2757 1278 4551 807 ...
#>  $ gdpPercap_1987: num [1:142] 5681 2430 1226 6206 912 ...
#>  $ gdpPercap_1992: num [1:142] 5023 2628 1191 7954 932 ...
#>  $ gdpPercap_1997: num [1:142] 4797 2277 1233 8647 946 ...
#>  $ gdpPercap_2002: num [1:142] 5288 2773 1373 11004 1038 ...
#>  $ gdpPercap_2007: num [1:142] 6223 4797 1441 12570 1217 ...
#>  $ lifeExp_1952  : num [1:142] 43.1 30 38.2 47.6 32 ...
#>  $ lifeExp_1957  : num [1:142] 45.7 32 40.4 49.6 34.9 ...
#>  $ lifeExp_1962  : num [1:142] 48.3 34 42.6 51.5 37.8 ...
#>  $ lifeExp_1967  : num [1:142] 51.4 36 44.9 53.3 40.7 ...
#>  $ lifeExp_1972  : num [1:142] 54.5 37.9 47 56 43.6 ...
#>  $ lifeExp_1977  : num [1:142] 58 39.5 49.2 59.3 46.1 ...
#>  $ lifeExp_1982  : num [1:142] 61.4 39.9 50.9 61.5 48.1 ...
#>  $ lifeExp_1987  : num [1:142] 65.8 39.9 52.3 63.6 49.6 ...
#>  $ lifeExp_1992  : num [1:142] 67.7 40.6 53.9 62.7 50.3 ...
#>  $ lifeExp_1997  : num [1:142] 69.2 41 54.8 52.6 50.3 ...
#>  $ lifeExp_2002  : num [1:142] 71 41 54.4 46.6 50.6 ...
#>  $ lifeExp_2007  : num [1:142] 72.3 42.7 56.7 50.7 52.3 ...
#>  $ pop_1952      : num [1:142] 9279525 4232095 1738315 442308 4469979 ...
#>  $ pop_1957      : num [1:142] 10270856 4561361 1925173 474639 4713416 ...
#>  $ pop_1962      : num [1:142] 11000948 4826015 2151895 512764 4919632 ...
#>  $ pop_1967      : num [1:142] 12760499 5247469 2427334 553541 5127935 ...
#>  $ pop_1972      : num [1:142] 14760787 5894858 2761407 619351 5433886 ...
#>  $ pop_1977      : num [1:142] 17152804 6162675 3168267 781472 5889574 ...
#>  $ pop_1982      : num [1:142] 20033753 7016384 3641603 970347 6634596 ...
#>  $ pop_1987      : num [1:142] 23254956 7874230 4243788 1151184 7586551 ...
#>  $ pop_1992      : num [1:142] 26298373 8735988 4981671 1342614 8878303 ...
#>  $ pop_1997      : num [1:142] 29072015 9875024 6066080 1536536 10352843 ...
#>  $ pop_2002      : num [1:142] 31287142 10866106 7026113 1630347 12251209 ...
#>  $ pop_2007      : num [1:142] 33333216 12420476 8078314 1639131 14326203 ...
all.equal(gap_wide, gap_wide_betterID)
#> [1] "Attributes: < Component \"class\": Lengths (1, 3) differ (string compare on first 1) >"
#> [2] "Attributes: < Component \"class\": 1 string mismatch >" 
```

다시 되돌아왔다!


