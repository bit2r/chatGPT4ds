{
  "hash": "64d8896c1508160f58d79f25348c9e7f",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n![](images/function_vector.jpg)\n\n# 데이터 과학 함수\n\n단순한 데이터 과학 업무는 인터랙티브하게 콘솔에서 작업을 수행하지만,\n난이도가 올라가고 좀더 복작합 작업은 스크립트를 작성한다. 스크립트\n작업을 여러번 반복하게 되면 복사하여 붙여넣기를 자주하게 된다. 그런\n과정에서 뜻하지 않은 실수를 누구나 가지고 있다. 이제 함수를 작성하여\n이러한 실수를 줄이고 생산성을 높여나갈 시점이다. 함수를 작성하면\n복사하여 붙여넣기를 사용할 때보다 몇 가지 큰 이점이 있다.\n\n-   기억하기 좋고 연상적인 함수명은 코드 가독성을 높인다.\n-   복사하여 붙여넣기에 따른 버그를 없앨 수 있다.\n-   갖은 요구사항의 변경이 있더라도 한두 곳만 코드를 수정하면 문제를\n    해결할 수 있어 생산성이 올라간다.\n-   함수로 기능을 구현해 놓으면 나중에 패키지를 제작할 때 혹은 다른\n    프로젝트에 재사용이 용이하여 작성한 지적 산출물 공유를 촉진시킨다.\n\n즉, 함수를 작성하는 이유는 반복되는 중복 문제를 해결하고 추상화를 통해\n더 복잡한 작업을 가능하게 만들기 위해 사용한다. 거의 모든 데이터 과학\n분야에 함수가 사용되지만 다음 세가지 사례를 중점적으로 살펴보자.\n\n-   벡터를 입력으로 받아 벡터를 반환하는 함수.\n-   데이터프레임을 입력받아 데이터프레임을 반환하는 함수.\n-   데이터프레임을 입력받아 그래프를 반환하는 함수.\n\n## Defuse-and-Inject 패턴\n\n`tidy evaluation`에서 Defuse-and-Inject 패턴을 통해 데이터프레임 `dplyr`\n패키지와 그래프 문법에 따른 시각화 `ggplot2` 패키지에 함수를 직관적으로\n적용시킬 수 있다. **신관제거(defuse)**는 기본적으로 표현식의 평가를\n지연시켜 바로 실행되는 것을 막는 역할을 수행한다. 이런 기능을 통해\n환경의 맥락을 유지하는 역할을 수행한다. **주입(injection)**은 포획되거나\n신관제거된 표현석을 다른 맥락에서 평가하거나 다른 표현식에 주입하는\n개념이다. 신관제거에 `enquo()`가 사용되었다면 주입에는 `!!` (뱅-뱅\n이라고 읽음) 연산자를 사용하여 으로 다른 함수 내부에서 평가되어 실행되는\n역할을 수행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\nfilter_na <- function(dataframe, col_name) {\n  \n  col_quo = enquo(col_name) # 신관제거(defuse)\n  \n  dataframe %>%\n    select(species, island, sex, year, body_mass_g) |> \n    filter(is.na(!!col_quo)) # 주입(inject)\n}\n\n# 사용방법\npenguins %>% filter_na(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 5\n   species island    sex    year body_mass_g\n   <fct>   <fct>     <fct> <int>       <int>\n 1 Adelie  Torgersen <NA>   2007          NA\n 2 Adelie  Torgersen <NA>   2007        3475\n 3 Adelie  Torgersen <NA>   2007        4250\n 4 Adelie  Torgersen <NA>   2007        3300\n 5 Adelie  Torgersen <NA>   2007        3700\n 6 Adelie  Dream     <NA>   2007        2975\n 7 Gentoo  Biscoe    <NA>   2007        4100\n 8 Gentoo  Biscoe    <NA>   2008        4650\n 9 Gentoo  Biscoe    <NA>   2009        4725\n10 Gentoo  Biscoe    <NA>   2009        4875\n11 Gentoo  Biscoe    <NA>   2009          NA\n```\n\n\n:::\n:::\n\n\n`filter_na()` 함수는 데이터프레임과 칼럼명을 패러미터로 받아 칼럼명에\n결측값이 있는 행만 추출하여 반환하는 역할을 수행한다. 이를 위해서\n칼럼명을 신관제거하여 `col_quo` 표현식으로 지연시킨 후에 `!!col_quo`에\n주입시켜 평가작업을 수행하여 원하는 결과를 반환한다.\n\n## 역사\n\n`tidyvserse`는 **데이터 마스킹(data-masking)** 방식을 `ggplot2`, `dplyr`\n패키지에 도입했지만, 결국 `rlang` 패키지에 자체 프로그래밍 프레임워크를\n장착했다. `rlang` 패키지 `Defuse-and-Inject` 패턴에 이르는 과정은 이전\n다양한 시도를 통해 학습하는 배움의 과정이였다.\n\n-   S언어에서 `attach()` 함수로 데이터 범위 개념을 도입했다.\n    [@becker2018new]\n-   S언어로 모형 함수에 데이터 마스킹 공식을 도입했다.\n    [@chambers1992statistical]\n-   Peter Delgaard `frametools` 패키지를 1997년 작성했고 나중에\n    `base::transform()`, `base::subset()` 함수로 Base R에 채택됐다.\n-   Luke Tierney가 원래 환경을 추적하기 위해 공식을 2000년에 변경했고 R\n    1.1.0에 반영되었으며 `Quosures`의 모태가 되었다.\n-   2001년 Luke Tierney는 `base::with()`를 소개했다.\n-   `dplyr` 패키지가 2014년 첫선을 보였고, 2017년 `rlang` 패키지에\n    `tidy eval`이 구현되며 `quosure`, 암묵적 주입(implicit injection),\n    데이터 대명사(data pronouns) 개념이 소개됐다.\n-   2019년 `rlang` 0.4.0에 `Defuse-and-Inject` 패턴을 단순화한 `{{}}`이\n    도입되어 직관적으로 코드를 작성하게 되었다.\n\n데이터 분석에서 빈도수가 높은 작업을 Base R과 `dplyr` 패키지를 사용한 사례를 \n다음과 같이 비교하면 S언어에서 현재까지 이뤄낸 발전이 가시적으로 다가온다.\n\n|            작업             |                        Base R                        |                                  `dplyr`                                  |\n|:-------------------:|:------------------------:|:----------------------:|\n|   **행 필터링 (Filter)**    |              `subset(data, condition)`               |                       `data %>% filter(condition)`                        |\n| **특정 칼럼 선택 (Select)** |             `data[, c(\"col1\", \"col2\")]`              |                       `data %>% select(col1, col2)`                       |\n|     **그룹별 집계작업**     |   `aggregate(. ~ grouping_var, data, FUN = mean)`    | `data %>% group_by(grouping_var) %>% summarize(new_col = mean(col_name))` |\n|         죠인(Join)          |       `merge(data1, data2, by = \"key_column\")`       |             `data1 %>% inner_join(data2, by = \"key_column\")`              |\n|        **칼럼 추가**        | `transform(data, new_col = some_func(existing_col))` |           `data %>% mutate(new_col = some_func(existing_col))`            |\n|         **행 결합**         |                `rbind(data1, data2)`                 |                         `bind_rows(data1, data2)`                         |\n|        **칼럼 결합**        |                `cbind(data1, data2)`                 |                         `bind_cols(data1, data2)`                         |\n|          **정렬**           |            `data[order(data$col_name), ]`            |                       `data %>% arrange(col_name)`                        |\n\n\n\n### `attach()` 함수\n\n데이터프레임에 `attach()` 함수를 사용하면 데이터프레임을 구성하는 칼럼이\n벡터로 작업환경에서 바로 접근하여 작업을 수행할 수 있다. `penguins`\n데이터프레임을 `attach()`한 결과 `bill_depth_mm` 벡터가 작업환경에서\n바로 접근하여 평균값을 계산할 수 있게 되었다. 작업을 완료한 후에\n`detach()` 를 사용해서 작업환경에서 제거한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\nbase::attach(penguins)\n\nls(pos = which(search() == \"penguins\")[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"bill_depth_mm\"     \"bill_length_mm\"    \"body_mass_g\"      \n[4] \"flipper_length_mm\" \"island\"            \"sex\"              \n[7] \"species\"           \"year\"             \n```\n\n\n:::\n\n```{.r .cell-code}\nmean(bill_depth_mm, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.15117\n```\n\n\n:::\n\n```{.r .cell-code}\ndetach(penguins)\n```\n:::\n\n\n### `with()` 함수\n\n`attach()` 함수는 편리한 장점이 있지만, 데이터프레임 변수명과 함수명, 또\n다른 작업에서 나온 객체명과 충돌이 발생할 경우 전혀 생각하지 못한 문제가\n발생할 수 있다. 따라서, 격리를 통해 문제를 단순화하는 것이 필요하다.\n이를 위해서 `with()` 함수를 사용하게 되면 데이터프레임에 속한 칼럼명을\n명시하지 않더라도 간결하게 데이터 분석 작업을 이어나갈 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\nwith(data = penguins,\n     expr = mean(bill_depth_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.15117\n```\n\n\n:::\n:::\n\n\n### `aggregate()` 함수\n\nBase R 에서 지원되는 `aggregate()` 함수를 사용해서 동일한 결과를 얻을 수\n있다. `aggregate()` 함수는 `with()`와 지향점은 유사하지만 구현방식에서\n다소 차이가 난다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naggregate(bill_depth_mm ~ 1, \n          data = penguins, \n          FUN = mean, \n          na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  bill_depth_mm\n1      17.15117\n```\n\n\n:::\n:::\n\n\n\n## 데이터 마스킹\n\nR에서의 **데이터 마스킹(Data Masking)**은 `tidyverse` 생태계에서 데이터\n문법을 담당하는 `dplyr` 패키지에서 핵심적인 개념이다. 데이터 마스킹을\n사용하면 데이터프레임 칼럼을 `$`, `[[ ]]`를 사용하지 않고도 칼럼명으로\n직접 참조할 수 있어, 데이터를 조작하고 변환할 때 훨씬 직관적이고 가독성\n높은 코드를 작성할 수 있다.\n\n`penguins` 데이터프레임의 `species`를 데이터 마스킹 없이 조작하려면\n`penguins$species` 혹은 `penguins[['species']]`와 같이 구문을 작성해야\n하지만 데이터 마스킹을 사용하면 `species` 만으로 충분한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\n# 데이터 마스킹을 사용하여 펭귄종(species)이 \"Adelie\"만 추출한다.\npenguins %>% filter(species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n`dplyr` 함수의 데이터 마스킹은 비표준 평가 (Non-standard evaluation,\nNSE)라는 개념에 기반을 두는데, 표현식을 캡처하고 난 후 바로 바로\n실행되지 않고 제공된 데이터의 맥락 내에서 평가가 이루어진다. 데이터\n마스킹은 강력하며 깔끔한 구문을 제공하지만, 칼럼명과 충돌할 수 있는\n환경의 변수 이름이 있을 때 예기치 않은 방식으로 동작한다. 모호한 상황이\n발생할 때 항상 다음과 같은 방식으로 `.data$column_name` 함으로써 데이터\n마스킹 재정의(Overriding)를 통해 명확히 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies <- \"Chinstrap\"\n\npenguins %>% \n  filter(.data$species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n|     항목      | 데이터 마스킹                                                                                               | Tidy Evaluation                                                                                                                  |\n|:----------------:|:--------------------|:---------------------------------|\n|   **정의**    | \\- 데이터프레임 칼럼명을 직접적인 변수처럼 다룰 수 있는 능력. <br> - `$`나 `[[ ]]` 없이 칼럼 참조를 단순화. | \\- R 메타프로그래밍을 위한 프레임워크, 특히 tidyverse 에서 사용. <br> - 다양한 맥락에서 표현식을 캡쳐하고 평가하는 도구 제공.    |\n| **사용 사례** | \\- `dplyr` 함수에서 직접 데이터 조작. <br> - 코드 가독성 향상.                                              | \\- 따옴표 없는 표현식으로 사용자 정의 함수 생성. <br> - 표현식을 프로그래밍 방식으로 구성 및 평가. <br> - 표현식 평가 맥락 제어. |\n|   **구현**    | \\- 기본적으로 tidy evaluation 메커니즘을 사용하여 구현됨.                                                   | \\- `rlang 패키지` `enquo()`, `quo()`, `!!` 등을 사용. <br> - 표현식과 그 환경을 캡쳐하기 위해 쿼저(Quosure) 의존.                |\n|  **복잡성**   | \\- 최종 사용자를 위해 간소화. <br> - 기본적인 복잡성을 추상화.                                              | \\- R 메타프로그래밍 이해 필요. <br> - 고급 사용자에게 더 많은 유연성 제공.                                                       |\n\n## 깔끔한 평가\n\n**깔끔한 평가(Tidy evaluation)**은 R `tidyverse` 프레임워크로, 특히\n비표준 평가 (Non-Standard Evaluation, NSE)와 관련하여 `tidyverse` 함수로\n프로그래밍하는 방법을 표준화했다. NSE는 R 함수가 표준과는 다른 맥락에서\n표현식을 평가할 때 발생한다.\n\n-   준인용(Quasiquotation): `enquo()` 함수를 사용하여 표현식을 캡처하고\n    `!!`를 사용하여 표현식의 인용제거(Unquoting)을 가능케 한다.\n-   Pronouns (대명사): `.data` 대명사는 데이터프레임의 칼럼명을\n    명시적으로 참조하는데 사용되어 모호성을 제거한다.\n-   함수: `enquo()`는 표현식을 캡처하고, `quo_name()`은 표현식을\n    문자열로 변환하며, `!!`는 표현식 인용제거 또는 주입작업을 수행한다.\n\n예를 들어, `dplyr` 패키지 `filter` 및 `select`와 같은 동사를 사용하지만\n함수에 칼럼명을 작성하려는 경우, 인수로 전달될 때 이러한 동사가 어떤\n칼럼을 참조하는지 명확히 하기 위해 깔끔한 평가(tidy evaluation)가\n사용된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\nfilter_and_select <- function(data, col_name, threshold) {\n  \n  # 칼럼명 문자열을 기호로 변환\n  col_sym <- sym(col_name)\n  \n  # 준인용(quasiquotation)을 사용해서 칼럼 표현식을 캡쳐\n  col_expr <- enquo(col_sym)\n  \n  # !! 연산자를 이용하여 인용제거(unquote)하고 표현식을 주입\n  data %>% \n    filter(!!col_expr > threshold) %>% \n    select(!!col_expr)\n}\n\nfilter_and_select(penguins, \"bill_length_mm\", 55)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  bill_length_mm\n           <dbl>\n1           59.6\n2           55.9\n3           55.1\n4           58  \n5           55.8\n```\n\n\n:::\n:::\n\n\n`sym()` → `enquo()` → `!!`(뱅뱅) 구현방식이 Defuse-and-Inject 패턴으로\n내부 동작방식은 동일하지만 사용자 구문은 `{{ 칼럼명 }}`으로 깔끔해졌다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter_and_select_latest <- function(data, col_name, threshold) {\n  \n  data %>% \n    filter({{ col_name }} > threshold) %>% \n    select({{ col_name }})\n  \n}\n\nfilter_and_select_latest(penguins, bill_length_mm, 55)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  bill_length_mm\n           <dbl>\n1           59.6\n2           55.9\n3           55.1\n4           58  \n5           55.8\n```\n\n\n:::\n:::\n\n\n-   데이터 마스킹: 변수를 사용하여 계산하는 `arrange()`, `filter()`,\n    `summarize()` 등 함수에 사용.\n-   Tidy-selection: 변수를 선택하는 `select()`, `relocate()`,\n    `rename()`과 같은 함수에 사용.\n\n## 그룹별 평균\n\n![](images/function_dataframe.jpg)\n\n데이터프레임 요약통계량을 계산하는 코드를 작성해보자. 펭귄종(`species`)\n별로 부리길이를 계산하는 코드를 작성해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(species) |> \n  summarise(부리길이_평균 = mean(bill_length_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   부리길이_평균\n  <fct>             <dbl>\n1 Adelie             38.8\n2 Chinstrap          48.8\n3 Gentoo             47.5\n```\n\n\n:::\n:::\n\n\n이번에는 그룹변수와 데이터프레임 칼럼명을 달리하여 그룹별로 평균을\n계사하는 함수를 작성하여 코드로 작성해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_group_mean <- function(dataframe, group_varname, varname) {\n  dataframe |> \n    group_by(group_varname) |> \n    summarise(부리길이_평균 = mean(varname, na.rm = TRUE))\n}\n\nget_group_mean(penguins, species, bill_length_mm)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `group_varname` is not found.\n```\n\n\n:::\n:::\n\n\n상기 코드가 동작하지 않는 이유는 함수에 `tidyverse` 코드를 함수에 단순히\n전달해서 넣기 때문에 발생했다. 다음과 같이 칼러명을 포용(embracing)하는\n방식으로 `{{ 칼럼명 }}`과 같이 함수에 사용되는 데이터프레임 변수명을\n명시적으로 작성할 경우 문제가 해결된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_group_mean <- function(dataframe, group_varname, varname) {\n  dataframe |> \n    group_by( {{ group_varname }} ) |> \n    summarise(부리길이_평균 = mean( {{ varname }}, na.rm = TRUE))\n}\n\nget_group_mean(penguins, species, bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   부리길이_평균\n  <fct>             <dbl>\n1 Adelie             38.8\n2 Chinstrap          48.8\n3 Gentoo             47.5\n```\n\n\n:::\n:::\n\n\n## 그래프\n\n![](images/function_graph.jpg)\n\n데이터프레임에서 범주형 변수를 하나 선택하여 빈도수를 시각화하는\n스크립트를 다음과 같이 작성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\npenguins |> \n  count(island) |> \n  ggplot(aes(x=island, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](functions_ds_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n범주형 변수를 막대그래프로 시각화하는 함수를 제작해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw_bar_chart <- function(dataframe, varname) {\n  dataframe |> \n    count( {{ varname }} ) |> \n    ggplot(aes(x = {{ varname }}, y = n )) + \n      geom_col()\n}\n\npenguins |> draw_bar_chart(year)\n```\n\n::: {.cell-output-display}\n![](functions_ds_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n함수내에서 새로운 변수 이름을 생성하는 경우 `:=` 연산자를 사용해야 한다.\n깔끔한 평가(tidy evaluation)에서 `=` 와 동일한 역할을 수행하는 것이 `:=`\n이기 때문이다. 예를 들어, 펭귄이 서식하고 있는 섬을 기준으로 빈도수를\n내림차순 막대그래프를 작성할 경우, 함수 내부에서 범주형 변수를 다시\n재정의해야 하는데 이 경우 `:=` 연산자의 도입이 필요하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\n\norder_bar_chart <- function(dataframe, varname) {\n  dataframe |> \n    mutate({{ varname }} :=  fct_rev(fct_infreq( {{ varname }} ))) |>\n    ggplot(aes(y = {{ varname }} )) + \n      geom_bar()\n}\n\npenguins |> order_bar_chart(island)\n```\n\n::: {.cell-output-display}\n![](functions_ds_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n그래프를 작성할 때 거의 항상 등장하는 문제가 그래프 x-축, y-축 라벨을\n붙이고 그래프 제목, 범례 등 텍스트를 넣어야 한다. 이런 경우 `stringr`,\n`glue` 패키지의 다양한 함수를 깔끔한 평가(tidy evaluation)에서 지원하는\n기능이 `rlang` 패키지 `englue()` 함수다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw_bar_chart <- function(dataframe, varname, penguin_species) {\n  \n  title_label <- rlang::englue(\"남극에 서식하고 있는 펭귄 종 ({{ varname }}) {penguin_species} 빈도수\")\n  \n  dataframe |> \n    filter({{ varname }} == penguin_species) |> \n    count( island ) |> \n    ggplot(aes(x = island, y = n )) + \n      geom_col() +\n      labs(title = title_label)\n}\n\npenguins |> draw_bar_chart(species, \"Adelie\")\n```\n\n::: {.cell-output-display}\n![](functions_ds_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 역사\n\n",
    "supporting": [
      "functions_ds_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}